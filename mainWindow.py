'''         -*- coding: utf-8 -*-
Form implementation generated from reading ui file 'Main.ui'
Created by: PyQt5 UI code generator 5.15.0
WARNING: Any manual changes made to this file will be lost when pyuic5 is run again.
Do not edit this file unless you know what you are doing.'''


#                   FINAL PROJECT ON FANTASY CRICKET LEAGUE 
#                               By VUNNAM ANAND
 

from PyQt5 import QtCore, QtGui, QtWidgets
from newTeamdlg import Ui_Dialog
from Error_dialog import Ui_errorDialog
from Evaluate_Team import Ui_Form
import sqlite3 as sql
connection = sql.connect("Fantasy_cricket_db.db")
cursor = connection.cursor()

#Applying the stylesheet to the respected widgets
color = '''
QLabel{
    font: 10pt \"Comic Sans MS\";
}
QListWidget{
    font: 10pt \"Comic Sans MS\";
    border:5px solid black;
}
QComboBox:drop-down{
    border-image: url(dropdown.jpg) 2;
    border:1px solid black; 
    width:32px
}
QComboBox{
    height: 30px;
    background-color:rgb(255,255,255);
    font: 10pt \"Comic Sans MS\";
}
QPushButton:hover{
    background: lightblue;

}
QPushButton:pressed{
    background: rgb(204,204,204);
};
font: 75 10pt \"Comic Sans MS\";
background-color:rgb(204,204,204);
'''
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(900, 620)
        MainWindow.setStyleSheet("QMenuBar::item{\n"
        "background-color:rgb(180,180,180);\n"
        "border:1px solid black;\n"
        "padding:4px 30px 3px 30px;\n"
        "}\n")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("cricket.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMinimumSize(QtCore.QSize(848, 0))
        fontB = QtGui.QFont()
        fontB.setFamily("Comic Sans MS")
        fontB.setPointSize(10)
        fontB.setBold(True)
        fontB.setItalic(False)
        fontB.setWeight(75)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(False)
        self.centralwidget.setFont(fontB)
        self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);\n")
        self.centralwidget.setEnabled(False)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 4, 5, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 4, 3, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 2, 8, 4, 1)
        self.ptHL = QtWidgets.QHBoxLayout()
        self.ptHL.setSpacing(6)
        self.ptHL.setObjectName("ptHL")
        self.ptused = QtWidgets.QLabel(self.centralwidget)
        self.ptused.setFont(fontB)
        self.ptused.setObjectName("ptused")
        self.ptHL.addWidget(self.ptused)
        self.ptusedval = QtWidgets.QLabel(self.centralwidget)
        self.ptusedval.setFont(fontB)
        self.ptusedval.setStyleSheet("color: rgb(72,160,170);")
        self.ptusedval.setObjectName("ptusedval")
        self.ptHL.addWidget(self.ptusedval)
        spacerItem3 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.ptHL.addItem(spacerItem3)
        self.gridLayout.addLayout(self.ptHL, 3, 6, 1, 2)
        self.gtlbl = QtWidgets.QLabel(self.centralwidget)
        self.gtlbl.setMaximumSize(QtCore.QSize(20, 16777215))
        self.gtlbl.setFont(fontB)
        self.gtlbl.setAlignment(QtCore.Qt.AlignCenter)
        self.gtlbl.setObjectName("gtlbl")
        self.gridLayout.addWidget(self.gtlbl, 4, 4, 1, 1)
        self.lw2 = QtWidgets.QListWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lw2.sizePolicy().hasHeightForWidth())
        self.lw2.setSizePolicy(sizePolicy)
        self.lw2.setMinimumSize(QtCore.QSize(320, 0))
        self.lw2.setStyleSheet("border:1px solid black;\n")
        self.lw2.setObjectName("lw2")
        self.gridLayout.addWidget(self.lw2, 4, 6, 1, 2)

#Adding the Team Name to the selected players Listwidget
        item2 = QtWidgets.QListWidgetItem()
        self.lw2.addItem(item2)
        self.lw2HL = QtWidgets.QHBoxLayout()
        self.teamlabel = QtWidgets.QLabel()
        self.tnamelbl = QtWidgets.QLabel()
        self.teamlabel.setText("   Team Name ")
        self.tnamelbl.setText("Displayed Here")
        self.tnamelbl.setFont(fontB)
        self.tnamelbl.setStyleSheet("color:rgb(40,160,170);")
        self.teamlabel.setFont(fontB)
        self.lw2HL.addWidget(self.teamlabel)
        self.lw2HL.addWidget(self.tnamelbl)
        wid2 = QtWidgets.QWidget()
        wid2.setLayout(self.lw2HL)
        wid2.setStyleSheet("border-color:rgb(255,255,255);")
        item2.setSizeHint(wid2.minimumSizeHint())
        self.lw2.setItemWidget(item2,wid2)
        self.lw2.setStyleSheet("font: 10pt \"Comic Sans MS\";\n"
        "border:1px solid black;")
        self.lw2.setCurrentRow(1)

        spacerItem4 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem4, 0, 1, 1, 7)
        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem5, 5, 1, 1, 7)
        self.lw1 = QtWidgets.QListWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(70)
        sizePolicy.setHeightForWidth(self.lw1.sizePolicy().hasHeightForWidth())
        self.lw1.setSizePolicy(sizePolicy)
        self.lw1.setMinimumSize(QtCore.QSize(320, 0))
        self.lw1.setFont(font)
        self.lw1.setStyleSheet("border:1px solid black;\n"
        "font: 10pt \"Comic Sans MS\";")
        self.lw1.setObjectName("lw1")

#Adding radiobuttons to the Available players listwidget

        self.lw1HL = QtWidgets.QHBoxLayout()
        self.batbtn = QtWidgets.QRadioButton()
        self.bowbtn = QtWidgets.QRadioButton()
        self.arbtn = QtWidgets.QRadioButton()
        self.wkbtn = QtWidgets.QRadioButton()
        self.batbtn.setText("BAT  ")
        self.bowbtn.setText("BOW   ")
        self.arbtn.setText("AR")
        self.wkbtn.setText("WK")
        self.lw1HL.addWidget(self.batbtn)
        self.lw1HL.addWidget(self.bowbtn)
        self.lw1HL.addWidget(self.arbtn)
        self.lw1HL.addWidget(self.wkbtn)
        wid = QtWidgets.QWidget()
        wid.setLayout(self.lw1HL)
        wid.setStyleSheet("border-color:rgb(255,255,255);")
        item = QtWidgets.QListWidgetItem()
        self.lw1.addItem(item)
        item.setSizeHint(wid.minimumSizeHint())
        self.lw1.setItemWidget(item,wid)
        self.lw1.setCurrentRow(1)
        self.gridLayout.addWidget(self.lw1, 4, 1, 1, 2)

        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.MinimumExpanding)
        self.gridLayout.addItem(spacerItem6, 2, 1, 1, 7)
        spacerItem7 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem7, 2, 0, 4, 1)
        self.Vwid = QtWidgets.QWidget(self.centralwidget)
        self.Vwid.setMinimumSize(QtCore.QSize(805, 80))
        self.Vwid.setStyleSheet("background-color: rgb(240, 240, 240);\n"
        "border:1px solid rgb(170,170,170);")
        self.Vwid.setObjectName("Vwid")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.Vwid)
        self.verticalLayout.setContentsMargins(10, 2, 20, 20)
        self.verticalLayout.setSpacing(8)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widHL1 = QtWidgets.QHBoxLayout()
        self.widHL1.setContentsMargins(-1, 0, -1, -1)
        self.widHL1.setObjectName("widHL1")
        self.selectionslbl = QtWidgets.QLabel(self.Vwid)
        fonts = QtGui.QFont()
        fonts.setFamily("Comic Sans MS")
        fonts.setPointSize(9)
        self.selectionslbl.setFont(fonts)
        self.selectionslbl.setStyleSheet("border-color:rgb(240,240,240);")
        self.selectionslbl.setObjectName("selectionslbl")
        self.widHL1.addWidget(self.selectionslbl)
        self.verticalLayout.addLayout(self.widHL1)
        self.widHL2 = QtWidgets.QHBoxLayout()
        self.widHL2.setContentsMargins(-1, 3, -1, 5)
        self.widHL2.setSpacing(0)
        self.widHL2.setObjectName("widHL2")
        self.batlbl = QtWidgets.QLabel(self.Vwid)
        self.batlbl.setFont(fontB)
        self.batlbl.setStyleSheet("border-color:rgb(240,240,240);")
        self.batlbl.setObjectName("batlbl")
        self.widHL2.addWidget(self.batlbl)
        self.btnolbl = QtWidgets.QLabel(self.Vwid)
        self.btnolbl.setFont(font)
        self.btnolbl.setStyleSheet("color: rgb(72,160,170);\n"
        "border-color:rgb(240,240,240);")
        self.btnolbl.setLineWidth(1)
        self.btnolbl.setObjectName("btnolbl")
        self.widHL2.addWidget(self.btnolbl)
        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.widHL2.addItem(spacerItem8)
        self.bowlbl = QtWidgets.QLabel(self.Vwid)
        self.bowlbl.setFont(fontB)
        self.bowlbl.setStyleSheet("border-color:rgb(240,240,240);")
        self.bowlbl.setObjectName("bowlbl")
        self.widHL2.addWidget(self.bowlbl)
        self.bwnolbl = QtWidgets.QLabel(self.Vwid)
        self.bwnolbl.setFont(font)
        self.bwnolbl.setStyleSheet("color: rgb(72,160,170);\n"
        "border-color:rgb(240,240,240);")
        self.bwnolbl.setObjectName("bwnolbl")
        self.widHL2.addWidget(self.bwnolbl)
        spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.widHL2.addItem(spacerItem9)
        self.arlbl = QtWidgets.QLabel(self.Vwid)
        self.arlbl.setFont(fontB)
        self.arlbl.setStyleSheet("border-color:rgb(240,240,240);")
        self.arlbl.setObjectName("arlbl")
        self.widHL2.addWidget(self.arlbl)
        self.arnolbl = QtWidgets.QLabel(self.Vwid)
        self.arnolbl.setFont(font)
        self.arnolbl.setStyleSheet("color: rgb(72,160,170);\n"
        "border-color:rgb(240,240,240);\n")
        self.arnolbl.setObjectName("arnolbl")
        self.widHL2.addWidget(self.arnolbl)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.widHL2.addItem(spacerItem10)
        self.wklbl = QtWidgets.QLabel(self.Vwid)
        self.wklbl.setFont(fontB)
        self.wklbl.setStyleSheet("border-color:rgb(240,240,240);")
        self.wklbl.setObjectName("wklbl")
        self.widHL2.addWidget(self.wklbl)
        self.wknolbl = QtWidgets.QLabel(self.Vwid)
        self.wknolbl.setFont(font)
        self.wknolbl.setStyleSheet("color: rgb(72,160,170);\n"
        "border-color:rgb(240,240,240);\n")
        self.wknolbl.setObjectName("wknolbl")
        self.widHL2.addWidget(self.wknolbl)
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.widHL2.addItem(spacerItem11)
        self.verticalLayout.addLayout(self.widHL2)
        self.gridLayout.addWidget(self.Vwid, 1, 0, 1, 9)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.ptavail = QtWidgets.QLabel(self.centralwidget)
        self.ptavail.setFont(fontB)
        self.ptavail.setObjectName("ptavail")
        self.horizontalLayout.addWidget(self.ptavail)
        self.ptavailval = QtWidgets.QLabel(self.centralwidget)
        self.ptavailval.setFont(fontB)
        self.ptavailval.setStyleSheet("color:rgb(72,160,170);")
        self.horizontalLayout.addWidget(self.ptavailval)
        spacerItem12 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem12)
        self.gridLayout.addLayout(self.horizontalLayout, 3, 1, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 1, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem13, 0, 2, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem14, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 30))
        self.menubar.setFont(fonts)
        self.menubar.setStyleSheet("QMenu::item:selected{\n"
        "background-color:rgb(102,178,255);\n"
        "color:black;\n"
        "}\n"
        "font:  10pt \"Comic Sans MS\";")
        self.menubar.setDefaultUp(False)
        self.menubar.setNativeMenuBar(True)
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setAutoFillBackground(False)
        self.menuManage_Teams.setStyleSheet("border:1px solid black;\n"
        "background-color:rgb(180,180,180);\n"
        "font: 75 9pt \"Comic Sans MS\";\n")
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        self.menuOpen_Team = QtWidgets.QMenu(self.menuManage_Teams)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        self.actionNew_Team.setShortcutContext(QtCore.Qt.WidgetWithChildrenShortcut)
        self.actionNew_Team.setMenuRole(QtWidgets.QAction.TextHeuristicRole)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionSave_Team = QtWidgets.QAction(MainWindow)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.actionEvaluate_Team = QtWidgets.QAction(MainWindow)
        self.actionEvaluate_Team.setObjectName("actionEvaluate_Team")
        self.menuManage_Teams.addAction(self.actionNew_Team)
        self.menuManage_Teams.addAction(self.menuOpen_Team.menuAction())
        self.menuManage_Teams.addAction(self.actionSave_Team)
        self.menuManage_Teams.addAction(self.actionEvaluate_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())
        self.actionNew_Team.triggered.connect(self.newteamdialog)
        self.listing_players()
        self.fetchDistinctTeams()
        self.openTeamActions()
        self.actionEvaluate_Team.triggered.connect(self.evaluate_team)
        self.lw1.itemDoubleClicked.connect(self.createTeam)
        self.lw2.itemDoubleClicked.connect(self.removeTeamPlayers)
        self.batbtn.clicked.connect(self.batsmen)
        self.bowbtn.clicked.connect(self.bowlers)
        self.arbtn.clicked.connect(self.allrounders)
        self.wkbtn.clicked.connect(self.wicket_keepers)
        self.actionSave_Team.triggered.connect(self.saveTeam)
        
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

# To listing or sorting players as per the category 
    def listing_players(self):
        cursor.execute("SELECT category FROM stats")
        self.player = cursor.fetchall()
        category = list(map(''.join,self.player))
        self.selectedPlayers = list()
        for ctg in category:
            cursor.execute("SELECT player FROM stats WHERE category = ?",(ctg,))
            if ctg == "BAT":
                #listconversion is for convering the list of tuples to list of strings
                #Eg: [(Virat Kohli,)] -> ["Virat Kohli"]
                self.batsmenlist = Ui_Form.listconversion(Ui_Form,cursor.fetchall())#This method is in Evaluate_Team module
                self.batsmenlist.sort()
            elif ctg == "BOWL":
                self.bowlerlist = Ui_Form.listconversion(Ui_Form,cursor.fetchall())
                self.bowlerlist.sort()
            elif ctg == "AR":
                self.arlist = Ui_Form.listconversion(Ui_Form,cursor.fetchall())
                self.arlist.sort()
            elif ctg == "WK":
                self.wklist = Ui_Form.listconversion(Ui_Form,cursor.fetchall())
                self.wklist.sort()

    def setDefaultValue(self):
        '''To set all the values to default when we create a new team'''
        self.centralwidget.setEnabled(True)
        self.ptavailval.setText("1000")
        self.ptusedval.setText("0")
        self.btnolbl.setText("0")
        self.bwnolbl.setText("0")
        self.arnolbl.setText("0")
        self.wknolbl.setText("0")


    def turnRadioButtonsOff(self):
        '''To turn off the radio button if it is clicked while creating a new team or opening a team'''
        if self.batbtn.isChecked():
            self.batbtn.setAutoExclusive(False)
            self.batbtn.setChecked(False)
            self.batbtn.setAutoExclusive(True)
        elif self.bowbtn.isChecked():
            self.bowbtn.setAutoExclusive(False)
            self.bowbtn.setChecked(False)
            self.bowbtn.setAutoExclusive(True)
        elif self.arbtn.isChecked():
            self.arbtn.setAutoExclusive(False)
            self.arbtn.setChecked(False)
            self.arbtn.setAutoExclusive(True)
        elif self.wkbtn.isChecked():
            self.wkbtn.setAutoExclusive(False)
            self.wkbtn.setChecked(False)
            self.wkbtn.setAutoExclusive(True)

    def newteamdialog(self):
        ''' A Dialg to seek the unique team name from the user that to with atleast 2 characters 
        The format should be Ind/IND/ind/ind23/Ind24 '''
        Dialog = QtWidgets.QDialog()
        ui_new = Ui_Dialog()
        ui_new.setupUi(Dialog)
        Dialog.show()
        rsp = Dialog.exec_()
        cursor.execute("SELECT team_name from teams where team_name = ?;",(ui_new.lineEdit.text(),))
        team = cursor.fetchone()
        if rsp == Dialog.Accepted:
            if len(ui_new.lineEdit.text()) < 2: # Allows team name with greater than 2 characters
                self.showError("TeamName Error") #Calling the user defined showError method
                self.newteamdialog()
            else:
                if team is None:
                    self.tnamelbl.setText(ui_new.lineEdit.text()) 
                    self.listing_players()
                    self.setDefaultValue()
                    self.turnRadioButtonsOff()
                    #To clear all the list widget items
                    self.clear_players(self.lw1)
                    self.clear_players(self.lw2)
                    
                else:
                    self.showError("Team Exist Error")
                    self.newteamdialog()

    def clear_players(self,listWidget):
        '''To clear all the items of the list widget 
            listwidget: Passing the listwidget that need to be cleared except the first item of listwidget'''
        length = listWidget.count()
        while length > 0:
            listWidget.takeItem(1)
            length -= 1

    def fetchDistinctTeams(self):
        '''Fetching the team name from the teams table and creating a teams list'''
        cursor.execute("SELECT DISTINCT team_name FROM teams;")
        fetch_teams = cursor.fetchall()
        if fetch_teams is not None:
            self.teams_list = Ui_Form.listconversion(Ui_Form,fetch_teams)

    def openTeamActions(self):
        '''Displaying teams as actions of OPEN Team and connecting the actions to a method '''
        for team in self.teams_list:
                self.actionOpen_Team = QtWidgets.QAction(self.menuOpen_Team)
                self.actionOpen_Team.setText(team)
                self.menuOpen_Team.addAction(self.actionOpen_Team)
        self.menuOpen_Team.triggered[QtWidgets.QAction].connect(self.openTeam)

    def evaluate_team(self):
        '''Popping the evaluate team widget '''
        self.Form = QtWidgets.QWidget()
        self.ui = Ui_Form()
        self.ui.setupUi(self.Form)
        self.Form.show()
        self.Form.setStyleSheet(color)
        

    def color_blue(self,name_str):
        '''Used to color the items of a listwidget
            name_str: coverting the player name to a item of a listwidget with blue in color'''
        self.items =QtWidgets.QListWidgetItem("      "+name_str)
        blue = QtGui.QColor(40,110,255)
        self.items.setForeground(blue)
    
    def batsmen(self):
        '''Used to display the batsmen when BAT radiobutton is clicked'''
        self.clear_players(self.lw1)
        self.batsmenlist.sort()
        for batsman in self.batsmenlist:
            self.color_blue(batsman)  
            self.lw1.addItem(self.items)
              
    def bowlers(self):
        '''Used to display the bowlers when BOW radiobutton is clicked'''
        self.clear_players(self.lw1)
        self.bowlerlist.sort()
        for bowler in self.bowlerlist:
            self.color_blue(bowler)  
            self.lw1.addItem(self.items)

    def allrounders(self):
        '''Used to display the allrounders when AR radiobutton is clicked'''
        self.clear_players(self.lw1)
        self.arlist.sort()
        for allrounder in self.arlist:
            self.color_blue(allrounder)  
            self.lw1.addItem(self.items)

    def wicket_keepers(self):
        '''Used to display the wicket keepers when WK radiobutton is clicked'''
        self.clear_players(self.lw1)
        self.wklist.sort()
        for wicket_keeper in self.wklist:
            self.color_blue(wicket_keeper)  
            self.lw1.addItem(self.items)

    def showError(self,errortype):
        '''Displaying errors using QMessageBox class with Critical icon
            errortype: Passing the type of error as a string based on this the error message is displayed '''
        errorDialog = QtWidgets.QDialog()
        ui = Ui_errorDialog()
        ui.setupUi(errorDialog)
        errorDialog.show()
        if errortype == "points error":
            ui.errormsglabel.setText("Your violating cricket rule \nPlayer value is greater than the available points")
        elif errortype == "rule error":
            ui.errormsglabel.setText("You cannot select more than one wicket Keeper")
        elif errortype == "player error":
            ui.errormsglabel.setText("You cannot select this player \nThere should be one wicket Keeper in the team")
        elif errortype == "Team Exist Error":
            ui.errormsglabel.setText("Team already exists!\nYou cannot create two teams with the same name")
        elif errortype == "TeamName Error":
            ui.errormsglabel.setText("Please enter team name with atleast 2 characters\nTeam format : IND/SA/Ind/csk/Ind2/MI3")
        elif errortype == "SaveTeam Error":
            ui.errormsglabel.setText('''Team should contain exactly 11 players.\nMinimum of 3 Batsmen, 3 Bowlers, 1 allrounder and 1 wicket-keeper should be present in a team''')
        elif errortype == "Opening Error":
            ui.errormsglabel.setText("Please open a team or create a team to save")
        errorDialog.setMaximumSize(ui.errormsglabel.sizeHint())
        errorDialog.setStyleSheet(color)
        errorDialog.exec_()

    def numberOfPlayersSelected(self,valueText):
        '''Counting the number of players in each category that are selected
            valueText: holds the number of players in each category as a text/string'''
        return str(int(valueText)+ 1)

    def numberOfPlayersRejected(self,valueText):
        '''Decrementing the number of players in each category when they are rejected 
            valueText: holds the number of players in each category as a text/string'''
        return str(int(valueText)- 1)

    def playersSelection(self,name):
        '''Creating a list of selected players for a team
            name: Holds the name of the player who is being selected '''
        self.selectedPlayers.append(name)

    def playersRejected(self,name):
        '''Removing players from selected list if they got rejected
            name: Holds the name of the player who is being selected '''
        self.selectedPlayers.remove(name)

    def getValue(self,name):
        '''Fetch the value of the player using their 'name' '''
        cursor.execute("SELECT value FROM stats WHERE player = ?",(name,))
        return int(''.join(map(str,cursor.fetchone())))

    def getCategory(self,name):
        '''Fetch the category of the player using their 'name' '''
        cursor.execute("SELECT category FROM stats WHERE player = ?",(name,))
        return ''.join(cursor.fetchone())

    def createTeam(self,item):
        '''Selecting the players for a team by considering all the conditions and rules
            item:The player/item of available players listwidget i.e., lw1'''
        player = item.text()
        player_name = player.strip()
        try:
            value = self.getValue(player_name)
            ctg = self.getCategory(player_name)
        except:
            pass
        else:
            self.pointsAvail =  int(self.ptavailval.text())
            if self.pointsAvail >= value:
                # Trying to select  other players without selecting any wicket keeper
                if int(self.btnolbl.text()) + int(self.bwnolbl.text()) + int(self.arnolbl.text()) == 10 and int(self.wknolbl.text()) == 0 and ctg != "WK":
                    self.showError("player error") # There must be one wicket keeper
                else:
                    if ctg == "BAT":
                            self.batsmenlist.remove(player_name)
                            self.btnolbl.setText(self.numberOfPlayersSelected(self.btnolbl.text()))
                            self.playersSelection(player_name)
                    elif ctg == "BOWL":
                            self.bowlerlist.remove(player_name)
                            self.bwnolbl.setText(self.numberOfPlayersSelected(self.bwnolbl.text()))
                            self.playersSelection(player_name)
                    elif ctg == "AR":
                            self.arlist.remove(player_name)
                            self.arnolbl.setText(self.numberOfPlayersSelected(self.arnolbl.text()))
                            self.playersSelection(player_name)
                    elif ctg == "WK":
                        #Condition to select only one wicket keeper
                        if len(self.wklist) == 1:
                                self.showError("rule error")
                                return # To stop executing further lines when we selecting more than one WK
                        else:
                            self.wklist.remove(player_name)
                            self.wknolbl.setText(self.numberOfPlayersSelected(self.wknolbl.text()))
                            self.playersSelection(player_name)
                        
                    self.color_blue(player)
                    self.lw2.addItem(self.items)
                    self.lw1.takeItem(self.lw1.row(item))
                    points_used = str(int(self.ptusedval.text()) + value)
                    points_available = str(int(self.ptavailval.text()) - value)
                    self.ptusedval.setText(points_used)
                    self.ptavailval.setText(points_available)
            else:
                #While selecting the player with value more than available points
                self.showError("points error")

    def removeTeamPlayers(self,item):
        '''Adding the players to the appropriate category while they got rejected from the team
            item: The player of the selected listwidget i.e., lw2 who is rejected from team'''
        player = item.text()
        player_name = player.strip()
        try:
            value = self.getValue(player_name)
            ctg = self.getCategory(player_name)
        except:
            pass
        else:
            if ctg == "BAT":
                self.batbtn.setChecked(True)
                self.batsmenlist.append(player_name)
                self.btnolbl.setText(self.numberOfPlayersRejected(self.btnolbl.text()))
                self.batsmen()
                self.playersRejected(player_name)
            elif ctg == "BOWL":
                self.bowbtn.setChecked(True)
                self.bowlerlist.append(player_name)
                self.bwnolbl.setText(self.numberOfPlayersRejected(self.bwnolbl.text()))
                self.bowlers()
                self.playersRejected(player_name)
            elif ctg == "AR":
                self.arbtn.setChecked(True)
                self.arlist.append(player_name)
                self.arnolbl.setText(self.numberOfPlayersRejected(self.arnolbl.text()))
                self.allrounders()
                self.playersRejected(player_name)
            elif ctg == "WK":
                self.wkbtn.setChecked(True)
                self.wklist.append(player_name)
                self.wknolbl.setText(self.numberOfPlayersRejected(self.wknolbl.text()))
                self.wicket_keepers()
                self.playersRejected(player_name)

            self.lw2.takeItem(self.lw2.row(item))
            points_used = str(int(self.ptusedval.text()) - value)
            points_available = str(int(self.ptavailval.text()) + value)
            self.ptusedval.setText(points_used)
            self.ptavailval.setText(points_available)

    def saveTeam(self):
        '''Saving the team after final selection that triggers when save team action triggered'''
        if self.centralwidget.isEnabled() == False:
            self.showError("Opening Error")
        elif self.centralwidget.isEnabled() == True and ((int(self.wknolbl.text()) < 1 or int(self.btnolbl.text()) < 3 or int(self.arnolbl.text()) < 1 or int(self.bwnolbl.text()) < 3) or len(self.selectedPlayers) != 11):
            self.showError("SaveTeam Error")
        else:
            self.teamName = self.tnamelbl.text()
            # Updating the team if required
            cursor.execute("SELECT COUNT(team_name) FROM teams where team_name = ?",(self.teamName,))
            count = int(''.join(map(str,cursor.fetchone())))
            if count > 0:
                # Deleting the team if any changes made  
                cursor.execute("DELETE  FROM teams WHERE team_name = ?",(self.teamName,))
                connection.commit()
                self.menuOpen_Team.removeAction(self.action)
            # To the save the new team or update team
            self.selectedPlayers.sort()
            for player in self.selectedPlayers:
                value = self.getValue(player)
                cursor.execute("INSERT INTO teams(team_name,player,value) VALUES (?,?,?);",(self.teamName,player,value))
            connection.commit()
            #Displaying the success message
            infomsg = QtWidgets.QMessageBox()
            pixmap = QtGui.QPixmap("tick.png") 
            pixmap=pixmap.scaled(50,50,QtCore.Qt.KeepAspectRatio)
            infomsg.setIconPixmap(pixmap)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("cricket.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            infomsg.setWindowIcon(icon)
            infomsg.setWindowTitle("Save")
            infomsg.setText("\nTeam saved successfully!!")
            infomsg.setStyleSheet("font: 75 10pt \"Comic Sans MS\"")
            infomsg.exec_()
            self.teams_list.clear() # removing the previously added teams 
            self.teams_list.append(self.teamName) # adding the newly created team or updated team to the open team sub menu
            self.openTeamActions()

    def openTeam(self,action):
        '''Opening the team to view the team players or for the updation of the players and the team points
            action: The action of the open team that triggers this method when selected'''
        self.action =  action
        self.centralwidget.setEnabled(True)
        self.clear_players(self.lw1)
        self.clear_players(self.lw2)
        self.turnRadioButtonsOff()
        self.listing_players()
        self.tnamelbl.setText(action.text())
        cursor.execute("SELECT player FROM teams WHERE team_name = ?",(action.text(),))
        players = Ui_Form.listconversion(Ui_Form,cursor.fetchall())
        points_used = 0
        for player in players:
            value  = self.getValue(player)
            points_used += value
            cursor.execute("SELECT category FROM stats INNER JOIN teams WHERE stats.player = teams.player AND teams.player = ?",(player,))
            ctg = "".join(cursor.fetchone())
            if ctg == "BAT":
                self.batsmenlist.remove(player)
            elif ctg == "BOWL":
                self.bowlerlist.remove(player)
            elif ctg == "AR":
                self.arlist.remove(player)
            elif ctg == "WK":
                self.wklist.remove(player)
            self.playersSelection(player)
            self.color_blue("       "+player)
            self.lw2.addItem(self.items)
        cursor.execute("SELECT category FROM stats INNER JOIN teams WHERE stats.player = teams.player AND teams.team_name = ?",(action.text(),))
        ctg = Ui_Form.listconversion(Ui_Form,cursor.fetchall())
        self.btnolbl.setText(str(ctg.count("BAT")))
        self.bwnolbl.setText(str(ctg.count("BOWL")))
        self.arnolbl.setText(str(ctg.count("AR")))
        self.wknolbl.setText(str(ctg.count("WK")))
        self.ptusedval.setText(str(points_used))
        self.ptavailval.setText(str(1000-points_used))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.ptused.setText(_translate("MainWindow", "Points Used"))
        self.ptusedval.setText(_translate("MainWindow", "####"))
        self.gtlbl.setText(_translate("MainWindow", ">"))
        self.selectionslbl.setText(_translate("MainWindow", "Your Selections"))
        self.batlbl.setText(_translate("MainWindow", "Batsmen (BAT)"))
        self.btnolbl.setText(_translate("MainWindow", "##"))
        self.bowlbl.setText(_translate("MainWindow", "Bowler (BOW)"))
        self.bwnolbl.setText(_translate("MainWindow", "##"))
        self.arlbl.setText(_translate("MainWindow", "Allrounders (AR)"))
        self.arnolbl.setText(_translate("MainWindow", "##"))
        self.wklbl.setText(_translate("MainWindow", "Wicket-Keeper(WK)"))
        self.wknolbl.setText(_translate("MainWindow", "##"))
        self.ptavail.setText(_translate("MainWindow", "Points Available"))
        self.ptavailval.setText(_translate("MainWindow", "####"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNew_Team.setText(_translate("MainWindow", "       NEW Team"))
        self.menuOpen_Team.setTitle(_translate("MainWindow", "      OPEN Team"))
        self.actionSave_Team.setText(_translate("MainWindow", "      SAVE Team"))
        self.actionEvaluate_Team.setText(_translate("MainWindow", "      EVALUATE Team"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
